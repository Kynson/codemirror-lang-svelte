@top Document { (entity | DoctypeDecl)* }

kw<term> { @specialize[@name={term}]<identifier, term> }

pfx<type> { @extend[@name=BlockPrefix]<BlockPrefix, type> }

blk<type> { @specialize[@name=BlockType]<BlockType, type> }

entity[@isGroup=Entity] {
  IfBlock |
  EachBlock |
  AwaitBlock |
  KeyBlock |
  RawHTMLBlock |
  DebugBlock |
  ConstBlock |
  SnippetBlock |
  RenderBlock |
  Interpolation |
  UnknownBlock |
  Text |
  EntityReference |
  CharacterReference |
  InvalidEntity |
  Element |
  Comment |
  ProcessingInst |
  IncompleteCloseTag |
  MismatchedCloseTag |
  NoMatchCloseTag
}

IfBlock[group=Block] {
  IfBlockOpen (ElseBlock | entity)* IfBlockClose
}

EachBlock[group=Block] {
  EachBlockOpen (ElseBlock | entity)* EachBlockClose
}

AwaitBlock[group=Block] {
  AwaitBlockOpen (ThenBlock | CatchBlock | entity)* AwaitBlockClose
} 

KeyBlock[group=Block] {
  KeyBlockOpen entity* KeyBlockClose
}

SnippetBlock[group=Block] {
  SnippetBlockOpen entity* SnippetBlockClose
}

Element {
  OpenScriptTag ScriptText (CloseScriptTag | missingCloseTag) |
  OpenStyleTag StyleText (CloseStyleTag | missingCloseTag) |
  OpenTextareaTag TextareaText (CloseTextareaTag | missingCloseTag) |
  OpenTag entity* (CloseTag | missingCloseTag) |
  SelfClosingTag
}

ScriptText[group="TextContent Entity"] { scriptText* }

StyleText[group="TextContent Entity"] { styleText* }

TextareaText[group="TextContent Entity"] { textareaText* }

Comment { commentStart commentContent* commentEnd }

IfBlockOpen[group=BlockOpen,closedBy=IfBlockClose] {
  "{" pfx<"#"> blk<"if"> space+ LongExpression "}"
}

IfBlockClose[group=BlockClose,openedBy=IfBlockOpen] {
  "{" pfx<"/"> blk<"if"> "}"
}

ElseBlock[group=BlockInline] {
  "{" pfx<":"> blk<"else"> (space+ kw<"if"> space+ LongExpression)? "}"
}

EachBlockOpen[group=BlockOpen,closedBy=EachBlockClose] {
  "{"
    pfx<"#"> blk<"each">
    space+
    AsTerminatedLongExpression
    space+
    kw<"as">
    space+
    ShortExpression
    (
      space+
      ("(" LongExpression ")") |
      ("," (space+ Variable)? (space+ "(" LongExpression ")")?)
    )?
    space*
  "}"
}

EachBlockClose[group=BlockClose,openedBy=EachBlockOpen] {
  "{" pfx<"/"> blk<"each"> "}"
}

AwaitBlockOpen[group=BlockOpen,closedBy=AwaitBlockClose] {
  "{"
    pfx<"#"> blk<"await">
    space+
    ShortExpression
    (space+ (kw<"then"> | kw<"catch">) space+ ShortExpression)?
  "}"
}

AwaitBlockClose[group=BlockClose,closedBy=AwaitBlockOpen] {
  "{" pfx<"/"> blk<"await"> "}"
}

ThenBlock[group=BlockInline] {
  "{" pfx<":"> blk<"then"> (space+ Variable space*)? "}"
}

CatchBlock[group=BlockInline] {
  "{" pfx<":"> blk<"catch"> (space+ Variable space*)? "}"
}

KeyBlockOpen[group=BlockOpen,closedBy=KeyBlockClose] {
  "{" pfx<"#"> blk<"key"> space+ LongExpression "}"
}

KeyBlockClose[group=BlockClose,openedBy=KeyBlockOpen] {
  "{" pfx<"/"> blk<"key"> "}"
}

SnippetBlockOpen[group=BlockOpen,closedBy=SnippetBlockClose] {
  "{" pfx<"#"> blk<"snippet"> space+ SnippetIdentifier { identifier } "(" space* (Variable space* ("," space* Variable)*)* ")" space* "}"
}

SnippetBlockClose[group=BlockClose,openedBy=SnippetBlockOpen] {
  "{" pfx<"/"> blk<"snippet"> "}"
}

RawHTMLBlock {
  "{" pfx<"@"> blk<"html"> LongExpression "}"
}

DebugBlock {
  "{" pfx<"@"> blk<"debug"> space+ Variable space* ("," space* Variable)* "}"
}

ConstBlock {
  "{" pfx<"@"> blk<"const"> LongExpression "}"
}

RenderBlock {
  "{" pfx<"@"> blk<"render"> LongExpression "}"
}

UnknownBlock {
  "{"
  BlockPrefix
  BlockType
  space*
  UnknownBlockContent?
  "}"
}

Interpolation {
  "{" LongExpression "}"
}

SvelteElementName {
  @extend[@name=SvelteElementNamespace]<TagName, "svelte">
  ":"
  SvelteElementType
}

dr<name, term> {
  dir[@name=Directive{name}] {
    dirName[@name=DirectiveName] { @extend<AttributeName, term> }
    ":"
    DirectiveTarget
  }
}

directiveStart {
  dr<"On", "on"> |
  dr<"Bind", "bind"> |
  dr<"Let", "let"> |
  dr<"Class", "class"> |
  dr<"Style", "style"> |
  dr<"Use", "use"> |
  dr<"Transition", "transition"> |
  dr<"In", "in"> |
  dr<"Out", "out"> |
  dr<"Animate", "animate">
}

AttributeValue {
  Interpolation |
  "\"" attributeValueContentDouble? "\"" |
  "\'" attributeValueContentSingle? "\'"
}

attributeValueContentDouble[@name=AttributeValueContent] {
  (attributeValueContentCharDouble | attributeValueContentEntity)+
}

attributeValueContentSingle[@name=AttributeValueContent] {
  (attributeValueContentCharSingle | attributeValueContentEntity)+
}

attributeValueContentEntity {
  EntityReference |
  CharacterReference |
  Interpolation |
  InvalidEntity
}

@precedence { first, last }

elementName {
  TagName |
  ComponentName |
  SvelteElementName
}

OpenTag[closedBy=CloseTag] {
  StartTag space* !last elementName (!first space+ attr)* space* EndTag
}

SelfClosingTag {
  (StartTag space* !last elementName (!first space+ attr)* space* SelfClosingEndTag) |
  (StartSelfClosingTag space* !last TagName (!first space+ attr)* space* (SelfClosingEndTag | EndTag))
}

MismatchedCloseTag {
  MismatchedStartCloseTag space* elementName space* EndTag
}

NoMatchCloseTag[@name=CloseTag] {
  NoMatchStartCloseTag space* elementName space* EndTag
}

CloseTag[openedBy=OpenTag] {
  StartCloseTag space* elementName space* EndTag
}

OpenScriptTag[@name=OpenTag,closedBy=CloseTag] {
  StartScriptTag space* !last TagName !first (space+ attr)* EndTag
}

CloseScriptTag[@name=CloseTag,openedBy=OpenTag] {
  StartCloseScriptTag space* TagName space* EndTag
}

OpenStyleTag[@name=OpenTag,closedBy=CloseTag] {
  StartStyleTag space* !last TagName !first (space+ attr)* EndTag
}

CloseStyleTag[@name=CloseTag,openedBy=OpenTag] {
  StartCloseStyleTag space* TagName space* EndTag
}

OpenTextareaTag[@name=OpenTag,closedBy=CloseTag] {
  StartTextareaTag space* !last TagName !first (space+ attr)* space* EndTag
}

CloseTextareaTag[@name=CloseTag,openedBy=OpenTag] {
  StartCloseTextareaTag space* TagName space* EndTag
}

attr {
  DirectlyInterpolatedAttribute |
  SpreadInterpolatedAttribute |
  Directive |
  StyleAttribute |
  Attribute |
  Attachment
}

DirectlyInterpolatedAttribute {
  "{" space* (DirectlyInterpolatedAttributeValue { identifier })? !first space* !last "}"
}

SpreadInterpolatedAttribute {
  "{" space* "..." LongExpression "}"
}

Attribute {
  !first AttributeName
  ("|" Modifier)*
  !last space*
  (!first Is space* (AttributeValue | UnquotedAttributeValue))?
}

Directive {
  !first directiveStart
  ("|" Modifier)*
  !last space*
  (!first Is space* (AttributeValue | UnquotedAttributeValue))?
}

StyleAttribute {
  StyleAttributeName (!last space* !first Is space* (AttributeValue | UnquotedAttributeValue))?
}

Attachment {
  "{" pfx<"@"> blk<"attach"> space+ LongExpression "}"
}

@context elementContext from "./html-tokens.ts"

@external tokens scriptTokens from "./html-tokens.ts" {
  scriptText
  StartCloseScriptTag[@name=StartCloseTag,closedBy=EndTag]
}

@external tokens styleTokens from "./html-tokens.ts" {
  styleText
  StartCloseStyleTag[@name=StartCloseTag,closedBy=EndTag]
}

@external tokens textareaTokens from "./html-tokens.ts" {
  textareaText
  StartCloseTextareaTag[@name=StartCloseTag,closedBy=EndTag]
}

@external tokens tagStart from "./html-tokens.ts" {
  StartTag[closedBy="EndTag SelfClosingEndTag"],
  StartScriptTag[@name=StartTag,closedBy=EndTag],
  StartStyleTag[@name=StartTag,closedBy=EndTag],
  StartTextareaTag[@name=StartTag,closedBy=EndTag],
  StartSelfClosingTag[@name=StartTag,closedBy=EndTag],
  StartCloseTag[closedBy=EndTag],
  NoMatchStartCloseTag[@name=StartCloseTag,closedBy=EndTag]
  MismatchedStartCloseTag[@name=StartCloseTag,closedBy=EndTag],
  missingCloseTag,
  IncompleteCloseTag
}

@external tokens commentContent from "./tokens.ts" {
  commentContent
}

@external tokens longExpression from "./tokens.ts" {
  LongExpression
}

@external tokens asTerminatedLongExpression from "./tokens.ts" {
  AsTerminatedLongExpression
}

@external tokens shortExpression from "./tokens.ts" {
  ShortExpression
}

@tokens {
  "\""[@name=DoubleQuote, openedBy="\"", closedBy="\""]
  "\'"[@name=SingleQuote, openedBy="\'", closedBy="\'"]
  
  "{"[closedBy="}"]
  "}"[openedBy="{"]
  "("[closedBy="("]
  ")"[openedBy=")"]
  "["[closedBy="]"]
  "]"[openedBy="["]
  
  "," "|" "..."
  
  space { (" " | "\t" | "\r" | "\n")+ }
  
  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }
  word { identifierChar (identifierChar | @digit)* }
  identifier { word }
  
  Variable { identifierChar (identifierChar | @digit | ".")* }

  BlockPrefix { "#" | "@" | "/" | ":" }
  BlockType { identifier }

  UnknownBlockContent { ![}]+ }

  @precedence { UnknownBlockContent, space }

  commentStart { "<!--" }
  commentEnd { "-->" }

  EndTag[openedBy="StartTag StartCloseTag StartSelfClosingTag"] { "/"? ">" }
  SelfClosingEndTag[openedBy=StartTag] { "/>" }
  @precedence { SelfClosingEndTag, EndTag }

  tagNameStart {
    "_" |
    @asciiLowercase |
    $[\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D] |
    $[\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u{10000}-\u{EFFFF}]
  }

  componentNameStart {
    @asciiUppercase
  }

  nameChar {
    "_" |
    "-" |
    "." |
    @asciiLetter |
    @digit |
    $[\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D] |
    $[\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u{10000}-\u{EFFFF}] |
    $[\u00B7\u0300-\u036F\u203F-\u2040]
  }

  TagName { tagNameStart nameChar* }

  ComponentName { componentNameStart nameChar* }

  SvelteElementType { @asciiLetter+ }

  attributeChar { ![\u0000-\u0020\u007F-\u009F"'<>/=|:{\uFDD0-\uFDEF\uFFFE\uFFFF] }

  AttributeName { attributeChar+ }
  StyleAttributeName { "--" attributeChar+ }
  Modifier { attributeChar+ }
  DirectiveTarget { attributeChar+ }

  @precedence { StyleAttributeName, AttributeName }

  UnquotedAttributeValue { ![ \t\n\r\u000C=<>"'`{] ![ \t\n\r\u000C=<>"'`]* }

  attributeValueContentCharDouble { !["&{] }

  attributeValueContentCharSingle { !['&{] }

  Is { "=" }

  EntityReference { "&" ![#; ]+ ";" }

  CharacterReference { "&#" ![; ]+ ";" }

  InvalidEntity { "&" }

  @precedence { CharacterReference, EntityReference, InvalidEntity }

  Text[group=TextContent] { ![<&{]+ }

  ProcessingInst { "<?" piContent }

  piContent { ![?] piContent | "?" piQuestion }
  piQuestion { ![>] piContent | ">" }

  DoctypeDecl { "<!" ("doctype" | "DOCTYPE") ![>]* ">" }

  @precedence { commentStart, ProcessingInst, DoctypeDecl }
}

@external propSource svelteHighlighting from "./highlight"